import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class ShamirSecretSharing {
    public static void main(String[] args) {
        // Define the points based on the second test case
        Map<Integer, Point> points = new HashMap<>();
        points.put(1, new Point(1, "28735619723837", 10));
        points.put(2, new Point(2, "1A228867F0CA", 16));
        points.put(3, new Point(3, "32811A4AA0B7B", 12));
        points.put(4, new Point(4, "917978721331A", 11));
        points.put(5, new Point(5, "1A22886782E1", 16));
        points.put(6, new Point(6, "28735619654702", 10));
        points.put(7, new Point(7, "71AB5070CC4B", 14));
        points.put(8, new Point(8, "122662581541670", 9));
        points.put(9, new Point(9, "642121030037605", 8));

        // Minimum number of roots required
        int k = 6;
        
        // Calculate the secret (constant term c)
        BigInteger secret = findSecret(points, k);
        
        // Output the secret
        System.out.println("Secret (c): " + secret);
    }

    private static BigInteger findSecret(Map<Integer, Point> points, int k) {
        BigInteger secret = BigInteger.ZERO;
        
        // Lagrange interpolation to find the constant term c
        for (int i = 1; i <= k; i++) {
            Point p = points.get(i);
            BigInteger numerator = BigInteger.ONE;
            BigInteger denominator = BigInteger.ONE;

            for (int j = 1; j <= k; j++) {
                if (j != i) {
                    numerator = numerator.multiply(BigInteger.valueOf(-j));
                    denominator = denominator.multiply(BigInteger.valueOf(i - j));
                }
            }

            // Calculate the term for this point and add it to the secret
            BigInteger term = p.y.multiply(numerator).divide(denominator);
            secret = secret.add(term);
        }
        
        return secret;
    }

    private static class Point {
        int x;
        BigInteger y;

        // Constructor to initialize point with x and y in a specified base
        Point(int x, String value, int base) {
            this.x = x;
            this.y = new BigInteger(value, base); // Convert value from given base to decimal
        }
    }
}